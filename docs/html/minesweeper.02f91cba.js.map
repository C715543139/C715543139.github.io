{"mappings":"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","sources":["<anon>","script/minesweeper.js"],"sourcesContent":["// 画布属性\nconst canvas = document.getElementById(\"map\");\nconst ctx = canvas.getContext(\"2d\");\nconst cellSize = 50;\nconst counter = document.getElementById(\"counter\");\nconst ratio = window.devicePixelRatio;\nlet height = 9, width = 9;\n// 扫雷地图，0表示无雷，1表示有雷\nlet minesMap;\n// 地图状态，0表示揭开，1表示未揭开，2表示旗帜\nlet mapStatus;\n// 地雷数目\nlet minesCount = 10;\n// 首开无雷\nlet first = true;\n// 旗帜计数\nlet flagCount;\n// 绘制扫雷游戏网格\nfunction drawGrid() {\n    for(let row = 0; row < height; row++)for(let col = 0; col < width; col++){\n        // 使用交替颜色：基于行列索引之和判断颜色\n        if ((row + col) % 2 === 0) ctx.fillStyle = \"white\"; // 亮色\n        else ctx.fillStyle = \"lightgray\"; // 暗色\n        // 绘制单元格\n        ctx.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);\n    }\n}\nfunction generateMines(x, y) {\n    let index = xy2XY(x, y), X = index[0], Y = index[1];\n    let placedMines = 0;\n    while(placedMines < minesCount){\n        // 生成随机坐标 (1~height 和 1~width 范围内)\n        let row = Math.floor(Math.random() * height) + 1;\n        let col = Math.floor(Math.random() * width) + 1;\n        // 确保该位置没有地雷\n        if (row === Y && col === X) continue;\n        if (minesMap[row][col] !== 1) {\n            minesMap[row][col] = 1; // 放置地雷\n            placedMines++;\n        }\n    }\n}\nfunction init() {\n    // 解决文字模糊问题\n    canvas.style.width = width * cellSize + \"px\"; // 显示宽度\n    canvas.style.height = height * cellSize + \"px\"; // 显示高度\n    canvas.width = width * ratio * cellSize; // 实际分辨率宽度\n    canvas.height = height * ratio * cellSize; // 实际分辨率高度\n    ctx.scale(ratio, ratio);\n    minesMap = Array.from({\n        length: height + 2\n    }, ()=>Array(width + 2).fill(0));\n    mapStatus = Array.from({\n        length: height + 2\n    }, ()=>Array(width + 2).fill(1));\n    first = true;\n    flagCount = 0;\n    counter.textContent = `\\u{5360} ${minesCount - flagCount}`;\n    drawGrid();\n}\n// 换算坐标x，y到下标X，Y\nfunction xy2XY(x, y) {\n    return [\n        Math.floor(x / cellSize) + 1,\n        Math.floor(y / cellSize) + 1\n    ];\n}\n// 换算下标X，Y到坐标x，y\nfunction XY2xy(X, Y) {\n    return [\n        (X - 1) * cellSize,\n        (Y - 1) * cellSize\n    ];\n}\n// 计算雷数\nfunction sumMines(X, Y) {\n    if (minesMap[Y][X] !== 0) return -1;\n    let sum = 0;\n    for(let i = -1; i < 2; i++)for(let j = -1; j < 2; j++){\n        if (i === 0 && j === 0) continue;\n        sum += minesMap[Y + i][X + j];\n    }\n    return sum;\n}\n// 绘制数字\nfunction drawNum(cx, cy, num) {\n    ctx.font = `${cellSize * 0.8}px Arial`;\n    ctx.fillStyle = \"white\";\n    ctx.fillText(num.toString(), cx + cellSize * 0.27, cy + cellSize * 0.78);\n}\n// 揭开单个格子\nfunction uncoverSingleGrid(X, Y) {\n    if (X < 1 || Y < 1 || X > width || Y > height) return;\n    let coord = XY2xy(X, Y), cx = coord[0], cy = coord[1];\n    if (mapStatus[Y][X] === 1) {\n        let num = sumMines(X, Y);\n        if (num === -1) {\n            alert(\"GAME OVER!\");\n            init();\n        } else {\n            ctx.clearRect(cx, cy, cellSize + 1, cellSize + 1);\n            if (num !== 0) drawNum(cx, cy, num);\n            mapStatus[Y][X] = 0;\n            return num;\n        }\n    }\n}\n// 正常揭开格子\nfunction uncoverGrid(x, y) {\n    let index = xy2XY(x, y), X = index[0], Y = index[1];\n    if (X < 1 || Y < 1 || X > width || Y > height) return;\n    let coord = XY2xy(X, Y), cx = coord[0], cy = coord[1];\n    let num = uncoverSingleGrid(X, Y);\n    if (num === 0) {\n        for(let i = -1; i < 2; i++)for(let j = -1; j < 2; j++)uncoverGrid(cx + i * cellSize, cy + j * cellSize);\n    }\n}\n// 揭开四周所有格子\nfunction uncoverAllGrid(x, y) {\n    let index = xy2XY(x, y), X = index[0], Y = index[1];\n    if (X < 1 || Y < 1 || X > width || Y > height || mapStatus[Y][X] !== 0) return;\n    let coord = XY2xy(X, Y), cx = coord[0], cy = coord[1];\n    let flags = 0;\n    for(let i = -1; i < 2; i++){\n        for(let j = -1; j < 2; j++)if (mapStatus[Y + i][X + j] === 2) flags++;\n    }\n    if (flags >= sumMines(X, Y)) {\n        for(let i = -1; i < 2; i++)for(let j = -1; j < 2; j++)uncoverGrid(cx + i * cellSize, cy + j * cellSize);\n    }\n}\n// 旗帜设置\nfunction setFlag(x, y) {\n    if (flagCount >= minesCount) return;\n    let index = xy2XY(x, y), X = index[0], Y = index[1];\n    let coord = XY2xy(X, Y), cx = coord[0], cy = coord[1];\n    if (mapStatus[Y][X] === 1) {\n        ctx.font = `${cellSize * 0.6}px Arial`;\n        ctx.fillStyle = \"black\";\n        ctx.fillText(\"\\u5360\", cx + cellSize * 0.18, cy + cellSize * 0.74);\n        mapStatus[Y][X] = 2;\n        flagCount++;\n        counter.textContent = `\\u{5360} ${minesCount - flagCount}`;\n    } else if (mapStatus[Y][X] === 2) {\n        if ((X + Y) % 2 === 0) ctx.fillStyle = \"white\"; // 亮色\n        else ctx.fillStyle = \"lightgray\"; // 暗色\n        ctx.fillRect(cx, cy, cellSize, cellSize);\n        mapStatus[Y][X] = 1;\n        flagCount--;\n        counter.textContent = `\\u{5360} ${minesCount - flagCount}`;\n    }\n}\n// 胜利设置\nfunction checkWin() {\n    for(let i = 1; i <= height; i++)for(let j = 1; j < width; j++){\n        if (mapStatus[i][j] === 1 && minesMap[i][j] === 0) return;\n    }\n    alert(\"YOU WIN!\");\n    location.reload();\n}\n// main\ninit();\n// canvas监听\ncanvas.addEventListener(\"click\", (event)=>{\n    event.preventDefault();\n    if (first) {\n        generateMines(event.offsetX, event.offsetY);\n        first = false;\n    }\n    uncoverGrid(event.offsetX, event.offsetY);\n    checkWin();\n});\ncanvas.addEventListener(\"contextmenu\", (event)=>{\n    event.preventDefault();\n    setFlag(event.offsetX, event.offsetY);\n    if (mapStatus[1][2] === 2 && mapStatus[1][3] === 2) alert(\"12/13:\\uD83C\\uDF82\\u6C38\\u6CFD\\u751F\\u65E5\\u5FEB\\u4E50~\\uD83C\\uDF82\");\n});\ncanvas.addEventListener(\"dblclick\", (event)=>{\n    event.preventDefault();\n    uncoverAllGrid(event.offsetX, event.offsetY);\n    checkWin();\n});\n// toolbar监听\ndocument.getElementById(\"restart\").addEventListener(\"click\", ()=>{\n    init();\n});\ndocument.getElementById(\"mode\").addEventListener(\"click\", ()=>{\n    let w = Number(prompt(\"\\u8BF7\\u8F93\\u5165\\u5730\\u56FE\\u5BBD\\u5EA6(9-25)\", \"9\"));\n    if (w == null || w < 9 || w > 99) {\n        alert(\"\\u65E0\\u6548\\u7684\\u5BBD\\u5EA6\\uFF01\");\n        return;\n    }\n    let h = Number(prompt(\"\\u8BF7\\u8F93\\u5165\\u5730\\u56FE\\u9AD8\\u5EA6(9-25)\", \"9\"));\n    if (h == null || h < 9 || h > 99) {\n        alert(\"\\u65E0\\u6548\\u7684\\u9AD8\\u5EA6\\uFF01\");\n        return;\n    }\n    let n = Number(prompt(\"\\u8BF7\\u8F93\\u5165\\u5730\\u96F7\\u6570\\u91CF(10-100)\", \"10\"));\n    if (n == null || n < 10 || n > 100) {\n        alert(\"\\u65E0\\u6548\\u7684\\u6570\\u91CF\\uFF01\");\n        return;\n    }\n    if (n >= w * h) {\n        alert(\"\\u5DF2\\u7ECF\\u88C5\\u4E0D\\u4E0B\\u4E86\\u53E3\\u7259\\uFF01\");\n        return;\n    }\n    width = w;\n    height = h;\n    minesCount = n;\n    init();\n});\n\n//# sourceMappingURL=minesweeper.02f91cba.js.map\n","// 画布属性\r\nconst canvas = document.getElementById(\"map\");\r\nconst ctx = canvas.getContext(\"2d\");\r\nconst cellSize = 50;\r\nconst counter = document.getElementById(\"counter\");\r\nconst ratio = window.devicePixelRatio;\r\nlet height = 9, width = 9;\r\n\r\n// 扫雷地图，0表示无雷，1表示有雷\r\nlet minesMap;\r\n// 地图状态，0表示揭开，1表示未揭开，2表示旗帜\r\nlet mapStatus;\r\n// 地雷数目\r\nlet minesCount = 10;\r\n// 首开无雷\r\nlet first = true;\r\n// 旗帜计数\r\nlet flagCount;\r\n\r\n// 绘制扫雷游戏网格\r\nfunction drawGrid() {\r\n    for (let row = 0; row < height; row++) {\r\n        for (let col = 0; col < width; col++) {\r\n            // 使用交替颜色：基于行列索引之和判断颜色\r\n            if ((row + col) % 2 === 0) {\r\n                ctx.fillStyle = \"white\"; // 亮色\r\n            } else {\r\n                ctx.fillStyle = \"lightgray\"; // 暗色\r\n            }\r\n            // 绘制单元格\r\n            ctx.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);\r\n        }\r\n    }\r\n}\r\n\r\nfunction generateMines(x, y) {\r\n    let index = xy2XY(x, y), X = index[0], Y = index[1];\r\n    let placedMines = 0;\r\n    while (placedMines < minesCount) {\r\n        // 生成随机坐标 (1~height 和 1~width 范围内)\r\n        let row = Math.floor(Math.random() * height) + 1;\r\n        let col = Math.floor(Math.random() * width) + 1;\r\n        // 确保该位置没有地雷\r\n        if (row === Y && col === X) continue;\r\n        if (minesMap[row][col] !== 1) {\r\n            minesMap[row][col] = 1; // 放置地雷\r\n            placedMines++;\r\n        }\r\n    }\r\n}\r\n\r\nfunction init() {\r\n    // 解决文字模糊问题\r\n    canvas.style.width = width * cellSize + \"px\";   // 显示宽度\r\n    canvas.style.height = height * cellSize + \"px\"; // 显示高度\r\n    canvas.width = width * ratio * cellSize;    // 实际分辨率宽度\r\n    canvas.height = height * ratio * cellSize;  // 实际分辨率高度\r\n    ctx.scale(ratio, ratio);\r\n\r\n    minesMap = Array.from({length: height + 2}, () => Array(width + 2).fill(0));\r\n    mapStatus = Array.from({length: height + 2}, () => Array(width + 2).fill(1));\r\n    first = true;\r\n    flagCount = 0;\r\n\r\n    counter.textContent = `占 ${minesCount - flagCount}`;\r\n    drawGrid();\r\n}\r\n\r\n// 换算坐标x，y到下标X，Y\r\nfunction xy2XY(x, y) {\r\n    return [Math.floor(x / cellSize) + 1, Math.floor(y / cellSize) + 1];\r\n}\r\n\r\n// 换算下标X，Y到坐标x，y\r\nfunction XY2xy(X, Y) {\r\n    return [(X - 1) * cellSize, (Y - 1) * cellSize];\r\n}\r\n\r\n// 计算雷数\r\nfunction sumMines(X, Y) {\r\n    if (minesMap[Y][X] !== 0) {\r\n        return -1;\r\n    }\r\n\r\n    let sum = 0;\r\n    for (let i = -1; i < 2; i++) {\r\n        for (let j = -1; j < 2; j++) {\r\n            if (i === 0 && j === 0) continue;\r\n            sum += minesMap[Y + i][X + j];\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n\r\n// 绘制数字\r\nfunction drawNum(cx, cy, num) {\r\n    ctx.font = `${cellSize * 0.8}px Arial`;\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillText(num.toString(), cx + cellSize * 0.27, cy + cellSize * 0.78);\r\n}\r\n\r\n// 揭开单个格子\r\nfunction uncoverSingleGrid(X, Y) {\r\n    if (X < 1 || Y < 1 || X > width || Y > height) return;\r\n\r\n    let coord = XY2xy(X, Y), cx = coord[0], cy = coord[1];\r\n    if (mapStatus[Y][X] === 1) {\r\n        let num = sumMines(X, Y);\r\n        if (num === -1) {\r\n            alert(\"GAME OVER!\");\r\n            init();\r\n        } else {\r\n            ctx.clearRect(cx, cy, cellSize + 1, cellSize + 1);\r\n            if (num !== 0) drawNum(cx, cy, num);\r\n            mapStatus[Y][X] = 0;\r\n            return num;\r\n        }\r\n    }\r\n}\r\n\r\n// 正常揭开格子\r\nfunction uncoverGrid(x, y) {\r\n    let index = xy2XY(x, y), X = index[0], Y = index[1];\r\n    if (X < 1 || Y < 1 || X > width || Y > height) return;\r\n\r\n    let coord = XY2xy(X, Y), cx = coord[0], cy = coord[1];\r\n    let num = uncoverSingleGrid(X, Y);\r\n    if (num === 0) {\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                uncoverGrid(cx + i * cellSize, cy + j * cellSize);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// 揭开四周所有格子\r\nfunction uncoverAllGrid(x, y) {\r\n    let index = xy2XY(x, y), X = index[0], Y = index[1];\r\n    if (X < 1 || Y < 1 || X > width || Y > height || mapStatus[Y][X] !== 0) return;\r\n\r\n    let coord = XY2xy(X, Y), cx = coord[0], cy = coord[1];\r\n    let flags = 0;\r\n    for (let i = -1; i < 2; i++) {\r\n        for (let j = -1; j < 2; j++) {\r\n            if (mapStatus[Y + i][X + j] === 2) flags++;\r\n        }\r\n    }\r\n    if (flags >= sumMines(X, Y)) {\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                uncoverGrid(cx + i * cellSize, cy + j * cellSize);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// 旗帜设置\r\nfunction setFlag(x, y) {\r\n    if (flagCount >= minesCount) return;\r\n\r\n    let index = xy2XY(x, y), X = index[0], Y = index[1];\r\n    let coord = XY2xy(X, Y), cx = coord[0], cy = coord[1];\r\n    if (mapStatus[Y][X] === 1) {\r\n        ctx.font = `${cellSize * 0.6}px Arial`;\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fillText(\"占\", cx + cellSize * 0.18, cy + cellSize * 0.74);\r\n        mapStatus[Y][X] = 2;\r\n\r\n        flagCount++;\r\n        counter.textContent = `占 ${minesCount - flagCount}`;\r\n    } else if (mapStatus[Y][X] === 2) {\r\n        if ((X + Y) % 2 === 0) {\r\n            ctx.fillStyle = \"white\"; // 亮色\r\n        } else {\r\n            ctx.fillStyle = \"lightgray\"; // 暗色\r\n        }\r\n        ctx.fillRect(cx, cy, cellSize, cellSize);\r\n        mapStatus[Y][X] = 1;\r\n\r\n        flagCount--;\r\n        counter.textContent = `占 ${minesCount - flagCount}`;\r\n    }\r\n}\r\n\r\n// 胜利设置\r\nfunction checkWin() {\r\n    for (let i = 1; i <= height; i++) {\r\n        for (let j = 1; j < width; j++) {\r\n            if (mapStatus[i][j] === 1 && minesMap[i][j] === 0) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    alert(\"YOU WIN!\");\r\n    location.reload();\r\n}\r\n\r\n// main\r\ninit();\r\n// canvas监听\r\ncanvas.addEventListener(\"click\", (event) => {\r\n    event.preventDefault();\r\n    if (first) {\r\n        generateMines(event.offsetX, event.offsetY);\r\n        first = false;\r\n    }\r\n    uncoverGrid(event.offsetX, event.offsetY);\r\n    checkWin();\r\n});\r\ncanvas.addEventListener(\"contextmenu\", (event) => {\r\n    event.preventDefault();\r\n    setFlag(event.offsetX, event.offsetY);\r\n    if (mapStatus[1][2] === 2 && mapStatus[1][3] === 2) {\r\n        alert(\"12/13:🎂永泽生日快乐~🎂\");\r\n    }\r\n})\r\ncanvas.addEventListener(\"dblclick\", (event) => {\r\n    event.preventDefault();\r\n    uncoverAllGrid(event.offsetX, event.offsetY);\r\n    checkWin();\r\n})\r\n\r\n// toolbar监听\r\ndocument.getElementById(\"restart\").addEventListener(\"click\", () => {\r\n    init();\r\n})\r\ndocument.getElementById(\"mode\").addEventListener(\"click\", () => {\r\n    let w = Number(prompt(\"请输入地图宽度(9-25)\", \"9\"));\r\n    if (w == null || w < 9 || w > 99) {\r\n        alert(\"无效的宽度！\");\r\n        return;\r\n    }\r\n    let h = Number(prompt(\"请输入地图高度(9-25)\", \"9\"));\r\n    if (h == null || h < 9 || h > 99) {\r\n        alert(\"无效的高度！\");\r\n        return;\r\n    }\r\n    let n = Number(prompt(\"请输入地雷数量(10-100)\", \"10\"));\r\n    if (n == null || n < 10 || n > 100) {\r\n        alert(\"无效的数量！\");\r\n        return;\r\n    } if (n >= w * h){\r\n        alert(\"已经装不下了口牙！\");\r\n        return;\r\n    }\r\n\r\n    width = w;\r\n    height = h;\r\n    minesCount = n;\r\n    init();\r\n})"],"names":["minesMap","mapStatus","flagCount","canvas","document","getElementById","ctx","getContext","counter","ratio","window","devicePixelRatio","height","width","minesCount","first","init","style","scale","Array","from","length","fill","textContent","drawGrid","row","col","fillStyle","fillRect","xy2XY","x","y","Math","floor","XY2xy","X","Y","sumMines","sum","i","j","uncoverGrid","index","coord","cx","cy","num","uncoverSingleGrid","clearRect","cellSize","font","fillText","toString","alert","checkWin","location","reload","addEventListener","event","preventDefault","generateMines","placedMines","random","offsetX","offsetY","setFlag","uncoverAllGrid","flags","w","Number","prompt","h","n"],"version":3,"file":"minesweeper.02f91cba.js.map"}