{"mappings":"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","sources":["<anon>","script/2048.js"],"sourcesContent":["/* This implement is convert from C. */ const MAP_SIZE = 4;\nconst SWAP = (x, y)=>[\n        y,\n        x\n    ];\nlet g_map = Array.from({\n    length: MAP_SIZE + 2\n}, ()=>Array(MAP_SIZE + 2).fill(0));\nfunction RandNumber(max) {\n    const minCeiled = 0;\n    const maxFloored = Math.floor(max);\n    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled);\n}\nfunction NewBlock() {\n    let freeBlock = [];\n    for(let y = 1; y <= MAP_SIZE; y++){\n        for(let x = 1; x <= MAP_SIZE; x++)if (g_map[y][x] === 0) freeBlock.push([\n            y,\n            x\n        ]);\n    }\n    if (freeBlock.length === 0) return;\n    let [y, x] = freeBlock[RandNumber(freeBlock.length)];\n    g_map[y][x] = RandNumber(10) === 5 ? 4 : 2;\n}\nfunction Initiate() {\n    NewBlock();\n    NewBlock();\n}\nfunction Push(flag) {\n    let change = false;\n    let UP = flag === \"ArrowUp\", DOWN = flag === \"ArrowDown\", LEFT = flag === \"ArrowLeft\";\n    for(let x = 1; x <= MAP_SIZE; ++x){\n        for(let y = UP || LEFT ? 1 : MAP_SIZE; UP || LEFT ? y < MAP_SIZE : y > 1; UP || LEFT ? y++ : y--)if (g_map[UP || DOWN ? y : x][UP || DOWN ? x : y] === 0) {\n            let i = UP || LEFT ? y + 1 : y - 1;\n            while((UP || LEFT ? i <= MAP_SIZE : i > 0) && g_map[UP || DOWN ? i : x][UP || DOWN ? x : i] === 0)UP || LEFT ? i++ : i--;\n            if (UP || LEFT ? i <= MAP_SIZE : i > 0) {\n                change = true;\n                [g_map[UP || DOWN ? y : x][UP || DOWN ? x : y], g_map[UP || DOWN ? i : x][UP || DOWN ? x : i]] = SWAP(g_map[UP || DOWN ? y : x][UP || DOWN ? x : y], g_map[UP || DOWN ? i : x][UP || DOWN ? x : i]);\n            }\n        }\n    }\n    return change;\n}\nfunction Merge(flag) {\n    let change = false;\n    let UP = flag === \"ArrowUp\", DOWN = flag === \"ArrowDown\", LEFT = flag === \"ArrowLeft\";\n    if (UP || DOWN) for(let x = 1; x <= MAP_SIZE; ++x){\n        for(let y = UP ? 1 : MAP_SIZE; UP ? y < MAP_SIZE : y > 0; UP ? y++ : y--)if (g_map[y][x] === g_map[UP ? y + 1 : y - 1][x] && g_map[y][x] !== 0) {\n            change = true;\n            g_map[y][x] *= 2;\n            g_map[UP ? y + 1 : y - 1][x] = 0;\n        }\n    }\n    else for(let y = 1; y <= MAP_SIZE; ++y){\n        for(let x = LEFT ? 1 : MAP_SIZE; LEFT ? x < MAP_SIZE : x > 0; LEFT ? x++ : x--)if (g_map[y][x] === g_map[y][LEFT ? x + 1 : x - 1] && g_map[y][x] !== 0) {\n            change = true;\n            g_map[y][x] *= 2;\n            g_map[y][LEFT ? x + 1 : x - 1] = 0;\n        }\n    }\n    return change;\n}\nfunction Check() {\n    for(let y = 1; y <= MAP_SIZE; ++y)for(let x = 1; x <= MAP_SIZE; ++x){\n        if (g_map[y][x] === g_map[y - 1][x] || g_map[y][x] === g_map[y + 1][x] || g_map[y][x] === g_map[y][x - 1] || g_map[y][x] === g_map[y][x + 1] || g_map[y][x] === 0) return true;\n    }\n    return false;\n}\nfunction PrintMap() {\n    for(let y = 1; y <= MAP_SIZE; ++y)for(let x = 1; x <= MAP_SIZE; ++x){\n        let block = document.getElementById(String((y - 1) * MAP_SIZE + x - 1));\n        block.innerText = g_map[y][x] === 0 ? \"\" : g_map[y][x];\n    }\n}\n/* main */ Initiate();\nPrintMap();\ndocument.addEventListener(\"keydown\", (event)=>{\n    let op = event.key;\n    if (op === \"ArrowUp\" || op === \"ArrowDown\" || op === \"ArrowLeft\" || op === \"ArrowRight\") {\n        event.preventDefault();\n        let change;\n        change = Push(op);\n        change = Merge(op) || change;\n        change = Push(op) || change;\n        change && NewBlock();\n        PrintMap();\n        if (!Check()) {\n            alert(\"GAME OVER!\");\n            location.reload();\n        }\n    }\n});\n\n//# sourceMappingURL=2048.c9e3cb6c.js.map\n","/* This implement is convert from C. */\r\nconst MAP_SIZE = 4;\r\nconst SWAP = (x, y) => [y, x]\r\n\r\nlet g_map = Array.from({length: MAP_SIZE + 2}, () => Array(MAP_SIZE + 2).fill(0));\r\n\r\nfunction RandNumber(max) {\r\n    const minCeiled = 0;\r\n    const maxFloored = Math.floor(max);\r\n    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled);\r\n}\r\n\r\nfunction NewBlock() {\r\n    let freeBlock = [];\r\n    for (let y = 1; y <= MAP_SIZE; y++) {\r\n        for (let x = 1; x <= MAP_SIZE; x++) {\r\n            if (g_map[y][x] === 0) freeBlock.push([y, x]);\r\n        }\r\n    }\r\n    if (freeBlock.length === 0) return;\r\n    let [y, x] = freeBlock[RandNumber(freeBlock.length)];\r\n    g_map[y][x] = RandNumber(10) === 5 ? 4 : 2;\r\n}\r\n\r\nfunction Initiate() {\r\n    NewBlock();\r\n    NewBlock();\r\n}\r\n\r\nfunction Push(flag) {\r\n    let change = false;\r\n    let UP = flag === \"ArrowUp\", DOWN = flag === \"ArrowDown\", LEFT = flag === \"ArrowLeft\";\r\n    for (let x = 1; x <= MAP_SIZE; ++x) {\r\n        for (let y = (UP || LEFT ? 1 : MAP_SIZE); (UP || LEFT ? (y < MAP_SIZE) : (y > 1)); UP || LEFT ? y++ : y--) {\r\n            if (g_map[UP || DOWN ? y : x][UP || DOWN ? x : y] === 0) {\r\n                let i = (UP || LEFT ? (y + 1) : (y - 1));\r\n                while ((UP || LEFT ? (i <= MAP_SIZE) : (i > 0)) && g_map[UP || DOWN ? i : x][UP || DOWN ? x : i] === 0) UP || LEFT ? i++ : i--;\r\n                if ((UP || LEFT ? (i <= MAP_SIZE) : (i > 0))) {\r\n                    change = true;\r\n                    [g_map[UP || DOWN ? y : x][UP || DOWN ? x : y], g_map[UP || DOWN ? i : x][UP || DOWN ? x : i]]\r\n                        = SWAP(g_map[UP || DOWN ? y : x][UP || DOWN ? x : y], g_map[UP || DOWN ? i : x][UP || DOWN ? x : i])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return change;\r\n}\r\n\r\nfunction Merge(flag) {\r\n    let change = false;\r\n    let UP = flag === \"ArrowUp\", DOWN = flag === \"ArrowDown\", LEFT = flag === \"ArrowLeft\";\r\n    if (UP || DOWN) {\r\n        for (let x = 1; x <= MAP_SIZE; ++x) {\r\n            for (let y = (UP ? 1 : MAP_SIZE); (UP ? (y < MAP_SIZE) : (y > 0)); UP ? y++ : y--) {\r\n                if (g_map[y][x] === g_map[UP ? (y + 1) : (y - 1)][x] && g_map[y][x] !== 0) {\r\n                    change = true;\r\n                    g_map[y][x] *= 2;\r\n                    g_map[UP ? (y + 1) : (y - 1)][x] = 0;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (let y = 1; y <= MAP_SIZE; ++y) {\r\n            for (let x = (LEFT ? 1 : MAP_SIZE); (LEFT ? (x < MAP_SIZE) : (x > 0)); LEFT ? x++ : x--) {\r\n                if (g_map[y][x] === g_map[y][LEFT ? (x + 1) : (x - 1)] && g_map[y][x] !== 0) {\r\n                    change = true;\r\n                    g_map[y][x] *= 2;\r\n                    g_map[y][LEFT ? (x + 1) : (x - 1)] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return change;\r\n}\r\n\r\nfunction Check() {\r\n    for (let y = 1; y <= MAP_SIZE; ++y) {\r\n        for (let x = 1; x <= MAP_SIZE; ++x) {\r\n            if (g_map[y][x] === g_map[y - 1][x] || g_map[y][x] === g_map[y + 1][x] ||\r\n                g_map[y][x] === g_map[y][x - 1] || g_map[y][x] === g_map[y][x + 1] ||\r\n                g_map[y][x] === 0) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction PrintMap() {\r\n    for (let y = 1; y <= MAP_SIZE; ++y) {\r\n        for (let x = 1; x <= MAP_SIZE; ++x) {\r\n            let block = document.getElementById(String((y - 1) * MAP_SIZE + x - 1));\r\n            block.innerText = g_map[y][x] === 0 ? \"\" : g_map[y][x];\r\n        }\r\n    }\r\n}\r\n\r\n/* main */\r\nInitiate();\r\nPrintMap();\r\ndocument.addEventListener(\"keydown\", (event)=>{\r\n    let op = event.key;\r\n    if (op === \"ArrowUp\" || op === \"ArrowDown\" || op === \"ArrowLeft\" || op === \"ArrowRight\") {\r\n        event.preventDefault();\r\n        let change;\r\n        change = Push(op);\r\n        change = Merge(op) || change;\r\n        change = Push(op) || change;\r\n\r\n        change ? NewBlock() : null;\r\n        PrintMap();\r\n\r\n        if (!Check()) {\r\n            alert(\"GAME OVER!\");\r\n            location.reload();\r\n        }\r\n    }\r\n})"],"names":["SWAP","x","y","g_map","Array","from","length","MAP_SIZE","fill","RandNumber","max","Math","floor","random","maxFloored","NewBlock","freeBlock","push","Push","flag","change","UP","DOWN","LEFT","i","PrintMap","block","document","getElementById","String","innerText","addEventListener","event","op","key","preventDefault","Merge","Check","alert","location","reload"],"version":3,"file":"2048.c9e3cb6c.js.map"}